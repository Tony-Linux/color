#!/bin/bash

# Tony Linux Software License Agreement

# Version 1.0, Date: [Insert Date]

# 1. Grant of License:
#    This software is provided under the following license and is subject to the terms and conditions below.

# 2. Permitted Use:
#    You are granted a non-exclusive, non-transferable, and limited license to use the software solely for your own personal or internal business purposes.

# 3. Restrictions:
#    You may not modify, reverse-engineer, decompile, or attempt to gain unauthorized access to the software's source code. Any such actions will result in the termination of this license.

# 4. No Distribution:
#    You may not distribute, sublicense, or make the software available to third parties.

# 5. Ownership:
#    The software and all related intellectual property rights are owned by Tony Linux. You acknowledge and agree that Tony Linux retains all rights, title, and interest in and to the software.

# 6. Termination:
#    This license is effective until terminated. Tony Linux may terminate this license if you breach any of its terms. Upon termination, you must cease all use of the software and destroy any copies in your possession.

# 7. Disclaimer of Warranty:
#    The software is provided "as is," without warranty of any kind. Tony Linux disclaims all warranties, whether express, implied, or statutory, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement.

# 8. Limitation of Liability:
#    In no event shall Tony Linux be liable for any damages, whether in contract, tort, or otherwise, arising from the use or inability to use the software.

# 9. Governing Law:
#    This license shall be governed by and construed in accordance with the laws of [Your Jurisdiction].

# By using the software, you agree to be bound by the terms of this license agreement. If you do not agree to these terms, you must cease using the software immediately.

# For inquiries, please contact [https://github.com/Tony-Linux].

# End of License Agreement.


# Text Colors

black='\033[30m'
red='\033[31m'
green='\033[32m'
yellow='\033[33m'
blue='\033[34m'
magenta='\033[35m'
cyan='\033[36m'
white='\033[37m'
reset='\033[0m'

# Background Colors

bgblack='\033[40m'
bgred='\033[41m'
bggreen='\033[42m'
bgyellow='\033[43m'
bgblue='\033[44m'
bgmagenta='\033[45m'
bgcyan='\033[46m'
bgwhite='\033[47m'

bgblack-color() {
	echo -e "$bgblack$1"
}

bgred-color() {
	echo -e "$bgred$1"
}

bggreen-color() {
	echo -e "$bggreen$1"
}

bgyellow-color() {
	echo -e "$bgyellow$1"
}

bgblue-color() {
	echo -e "$bgblue$1"
}

bgmagenta-color() {
	echo -e "$bgmagenta$1"
}

bgcyan-color() {
	echo -e "$bgcyan$1"
}

bgwhite-color() {
	echo -e "$bgwhite$1"
}

background-change() {
	if [ -z $colr ]; then
		help-color
	elif [[ $colr == "black" ]]; then
		bgblack-color
	elif [[ $colr == "red" ]]; then
		bgred-color
	elif [[ $colr == "green" ]]; then
		bggreen-color
	elif [[ $colr == "yellow" ]]; then
		bgyellow-color
	elif [[ $colr == "blue" ]]; then
		bgblue-color
	elif [[ $colr == "magenta" ]]; then
		bgmagenta-color
	elif [[ $colr == "cyan" ]]; then
		bgcyan-color
	elif [[ $colr == "white" ]]; then
		bgwhite-color
	elif [[ $colr == "colors" ]]; then
		back-colors
	else
		help-color
	fi	
}


help-color() {
    echo "color 1.0 - Terminal Text Styling Utility"
    echo "Usage: color [command] [arguments]"
    echo "For more detailed usage, visit: https://your-usage-documentation-link-here.com"

    echo "Commands:"
    echo "  color color [color_name]        Change text color"
    echo "                                  Example: color red"
    echo "                                  Example: color yellow"
    echo "  color font [font_style]         Apply font styling"
    echo "                                  Example: color font bold"
    echo "                                  Example: color font italic"
    echo "                                  Example: color font underline"
    echo "  color bg [color_name]           Change background color"
    echo "                                  Example: color bg green"
    echo "                                  Example: color bg blue"
    echo "  color list colors               List available text colors"
    echo "  color bg colors                 List available background colors"
    echo "  color list fonts                List available font styles"
    echo "  color --help                      Display this help message"
}

# Text Effects

back-colors() {
	echo "Available background colors : "
	echo ""
	echo -e "${bggreen}Green${reset}"
	echo -e "${bgred}Red${reset}"
	echo -e "${bgblue}Blue${reset}"
	echo -e "${bgmagenta}Magenta${reset}"
	echo -e "${bgcyan}Cyan${reset}"
	echo -e "${bgyellow}Yellow${reset}"
	echo -e "${bgwhite}White${reset}"
	echo -e "${bgblack}Black${reset}"
	echo -e "${reset}Reset"
	echo ""
	echo "Commands:"
	echo "color bg green , color bg cyan , color bg your-choice"
	
}

list-color() {
	echo "Available Text Colors :"
	echo ""
	echo -e "${green}Green${reset}"
	echo -e "${red}Red${reset}"
	echo -e "${blue}Blue${reset}"
	echo -e "${magenta}Magenta${reset}"
	echo -e "${cyan}Cyan${reset}"
	echo -e "${yellow}Yellow${reset}"
	echo -e "${white}White${reset}"
	echo -e "${black}Black${reset} #Black Text"
	echo -e "${reset}Reset${reset}"
	echo ""
	echo "Commands:"	
	echo "color green , color red , color your-choice"
}

list-mytheme() {
	echo "List Fonts :"
	echo -e "${bold}Bold${reset}"
	echo -e "${italic}Italic${reset}"
	echo -e "${dim}Dim${reset}"
	echo -e "${underline}Underline${reset}"
	echo -e "${blink}Blink${reset}"
	echo -e "${invert}Invert${reset}"
	echo -e "${hidden}Hidden${reset} #Hidden"
	echo -e "${reset}Reset${reset}"
	echo ""
	echo "Commands:"
	echo "color bold , color hidden , color italic , color your-choice"
}


bold='\033[1m'
dim='\033[2m'
italic='\033[3m'
underline='\033[4m'
blink='\033[5m'
invert='\033[7m'
hidden='\033[8m'

list-fonts() {
	echo "List Fonts : "
	echo ""
	echo "Bold"
	echo "Italic"
	echo "Underline"
	echo "Blink"
	echo "Invert"
	echo "Hidden"
	echo "Reset"
}
dim-theme() {
	echo -e "$dim$1"
}

italic-theme() {
	echo -e "$italic$1"
}

underline-theme() {
	echo -e "$underline$1"
}

blink-theme() {
	echo -e "$blink$1"
}

invert-theme() {
	echo -e "$invert$1"
}

hidden-theme() {
	echo -e "$hidden$1"
}

red-color() {
    echo -e "$red$1"
}

blue-color() {
	echo -e "$blue$1"
}

green-color() {
	echo -e "$green$1"
}

magenta-color() {
	echo -e "$magenta$1"
}

yellow-color() {
	echo -e "$yellow$1"
}

cyan-color() {
	echo -e "$cyan$1"
}

white-color() {
	echo -e "$white$1"
}

black-color() {
	echo -e "$black$1"
}

reset-me() {
	echo -e "$reset$1"
}

bold-theme() {
	echo -e "$bold$1"
}


if [ -z $1 ]; then
	help-color
elif [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
	help-color
elif [[ $1 == "red" ]]; then
	red-color
elif [[ $1 == "blue" ]]; then
	blue-color
elif [[ $1 == "yellow" ]]; then
	yellow-color
elif [[ $1 == "magenta" ]]; then
	magenta-color
elif [[ $1 == "cyan" ]]; then
	cyan-color
elif [[ $1 == "white" ]]; then
	white-color
elif [[ $1 == "black" ]]; then
	black-color
elif [[ $1 == "green" ]]; then
	green-color
elif [[ $1 == "reset" ]]; then
	reset-me
elif [[ $1 == "bg" ]]; then
	colr="$2"
	background-change
elif [[ $1 == "bold" ]]; then
	bold-theme
elif [[ $1 == "dim" ]]; then
	dim-theme
elif [[ $1 == "italic" ]]; then
	italic-theme
elif [[ $1 == "underline" ]]; then
	underline-theme
elif [[ $1 == "blink" ]]; then
	blink-theme
elif [[ $1 == "invert" ]]; then
	invert-theme
elif [[ $1 == "hidden" ]]; then
	hidden-theme
elif [[ $1 == "list" ]] && [[ $2 == "colors" ]]; then
	list-color
elif [[ $1 == "list" ]] && [[ $2 == "fonts" ]]; then
	list-mytheme
else
	help-color
fi
